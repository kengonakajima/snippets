/*---------------------------------------------------------------------------*
 * 圧縮ルーチンを使う場合にはこのファイルをインクルードすればOK
 * 98-11-18
 *---------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*
 * srcbufからsrclenバイトのデータをエンコードしてdestbufから始まる領域に
 * 格納し、そのバイト数をdestlenに格納します。
 * destbuf から後には必要なだけ格納用の領域を確保しておく必要があります。
 * destlen は初期化してない状態でも構いません。
 * JPEG画像などデータによっては元よりもデータサイズが増える場合もあるので、
 * destbufに確保しておく領域のバイト数は srclen の倍程度がおすすめです。
 * (確保しているサイズを越えたかどうかのチェックなどはいっさいしません)
 *-------------------------------------------------------------------------*/
int EncodeData(char* destbuf, char* srcbuf, long* destlen, long srclen);

/*--------------------------------------------------------------------------*
 * エンコードされたデータ列の先頭を指すポインタpからそのデコード後のデータ
 * サイズを算出して返します。
 *--------------------------------------------------------------------------*/
long GetOriginalDataSize(char* srcbuf);

/*-------------------------------------------------------------------------*
 * srcbufからsrclenバイトのデータをデコードしてdestbufから始まる領域に
 * 格納し、そのバイト数をdestlenに格納します。
 * destbuf から後には必要なだけ格納用の領域を確保しておく必要があります。
 * destbufとdestlenを適切に初期化しておく
 * 方法は2つあり、1つは先に destlen = GetOriginalDataSize()関数を使って
 * 元データのサイズを取得しておき、その大きさぴったりの領域を
 * destbuf = malloc(destlen) で確保し、そのままのdestbufとdestlenを
 * 使うことです。2つめは適当に大きなサイズの領域を destbuf に確保しておき、
 * destlen には **正でない** 適当な値を入れて使うことです。後者の場合は
 * 正常終了ならデコードされた元データのサイズが destlen に返って来ますが、
 * 元データのサイズが驚異的に大きかった場合には、データが入り切らずに異常終了
 * する危険があります。
 * (確保しているサイズを越えたかどうかのチェックなどはいっさいしません)
 *-------------------------------------------------------------------------*/
int DecodeData(char* destbuf, char* srcbuf, long* destlen, long srclen);

/*--------------------------------------------------------------------------*
 * 最上位の圧縮展開関数
 *--------------------------------------------------------------------------*/
int unpack(char* bytedata, long* bytelength, int mode);

/* end. */
