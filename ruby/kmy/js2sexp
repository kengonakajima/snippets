#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
  #
# $Id: 3c2cf4b8b66a54ac219c7a6020e94b8668ec7e25 $
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id: 3c2cf4b8b66a54ac219c7a6020e94b8668ec7e25 $'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id: 3c2cf4b8b66a54ac219c7a6020e94b8668ec7e25 $'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

end
###### racc/parser.rb end


require "pp"

def typeof(t)
  return t.class
end




class JS < Racc::Parser

#
# racc inner file
#

$KCODE='u'

# keywords
TOKENS = [
  ["!=", :NOT_EQUAL],
  ["!==", :NOT_EQ],
  ["%=", :MOD_LET],
  ["&&", :LOGICAL_AND],
  ["&=", :AND_LET],
  ["*=", :MUL_LET],
  ["++", :INCREMENT],
  ["+=", :ADD_LET],
  ["--", :DECREMENT],
  ["-=", :SUB_LET],
  ["/=", :DIV_LET],
  ["<<", :SHIFT_LEFT],
  ["<<=", :SHIFT_LEFT_LET],
  ["<=", :LESS_EQUAL],
  ["==", :EQUAL],
  ["===", :EQ],
  [">=", :GRATER_EQUAL],
  [">>", :SHIFT_RIGHT],
  [">>=", :SHIFT_RIGHT_LET],
  [">>>", :U_SHIFT_RIGHT],
  [">>>=", :U_SHIFT_RIGHT_LET],
  ["^=", :NOT_LET],
  ["abstract", :ABSTRACT],
  ["boolean", :BOOLEAN],
  ["break", :BREAK],
  ["byte", :BYTE],
  ["case", :CASE],
  ["catch", :CATCH],
  ["char", :CHAR],
  ["class", :CLASS],
  ["const", :CONST],
  ["continue", :CONTINUE],
  ["debugger", :DEBUGGER],
  ["default", :DEFAULT],
  ["delete", :DELETE],
  ["do", :DO],
  ["double", :DOUBLE],
  ["else", :ELSE],
  ["enum", :ENUM],
  ["export", :EXPORT],
  ["extends", :EXTENDS],
  ["false", :FALSE],
  ["final", :FINAL],
  ["finally", :FINALLY],
  ["float", :FLOAT],
  ["for", :FOR],
  ["function", :FUNCTION],
  ["goto", :GOTO],
  ["if", :IF],
  ["implements", :IMPLEMENTS],
  ["import", :IMPORT],
  ["in", :IN],
  ["instanceof", :INSTANCEOF],
  ["int", :INT],
  ["interface", :INTERFACE],
  ["long", :LONG],
  ["native", :NATIVE],
  ["new", :NEW],
  ["null", :NULL],
  ["package", :PACKAGE],
  ["private", :PRIVATE],
  ["protected", :PROTECTED],
  ["public", :PUBLIC],
  ["return", :RETURN],
  ["short", :SHORT],
  ["static", :STATIC],
  ["super", :SUPER],
  ["switch", :SWITCH],
  ["synchronized", :SYNCHRONIZED],
  ["this", :THIS],
  ["throw", :THROW],
  ["throws", :THROWS],
  ["transient", :TRANSIENT],
  ["true", :TRUE],
  ["try", :TRY],
  ["typeof", :TYPEOF],
  ["var", :VAR],
  ["void", :VOID],
  ["volatile", :VOLATILE],
  ["while", :WHILE],
  ["with", :WITH],
  ["|=", :OR_LET],
  ["||", :LOGICAL_OR]
]


# 正規表現が続く記号
REOK3 = /^===|^!==/
REOK2 = /^\|\||^\|=|^\^=|^>=|^==|^<=|^&=|^&&|^!=/
REOK1 = /^\}|^\||^\{|^\^|^\[|^\?|^=|^;|^:|^,|^\(|^&|^!/
    
# 正規表現が続かない記号
RENG4 = /^>>>=/;
RENG3 = /^>>>|^>>=|^<<=/
RENG2 = /^>>|^<<|^\/=|^\-=|^\-\-|^\+=|^\+\+|^\*=|^%=/
RENG1 = /^~|^\]|^>|^<|^\/|^.|^\-|^\+|^\*|^\)|^%/




####################################################
####################################################
####################################################


def initialize()

end

def isToken(str) 
  str = str.to_s
#  raise "KKKKKKKKKKKKKKK" if str == "&&"
  TOKENS.each do |pair|
    if str == pair[0] then 
      return pair[1]
    end
  end
  return nil
end

def get()  # Scanner.prototype.get = function () {
  result = nil
  comment = false
  while true
    if @output.size > 0 then
      result = @output.shift
      break
    end

    if @buffer == nil or @buffer.size == 0 then
      if @lines.size == 0 then
        result = [0,nil]
        break
      end
      @buffer = @lines.shift
    end

    if comment then
      if @buffer =~ /(.*\*\/)/ then
        @buffer = $' 
        comment = false
      else
        @buffer = nil
      end
    else
      saveBuffer = @buffer.dup

      if @buffer =~ /^[ \t\r\n]+/ then
        @buffer = $'
      elsif @buffer =~ /^\/\//  then
        @buffer = nil
      elsif @buffer =~ /^\/\*/ then
        @buffer = $'
        comment = true
      elsif @buffer =~ /^"((?:[^"\\]|\\.)*)"/  then #"  # for ruby mode..
        @output.push([:STRING_LITERAL, $1])
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^'((?:[^'\\]|\\.)*)'/ then #'   # for ruby mode..
        @output.push([:STRING_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @regexp and @buffer =~ /^(\/(?:[^\/\\]|\\.)*\/[igIG]*)/ then
        @output.push([:REGEXP_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^(0x[0-9A-Fa-f]+)/ then
        @output.push([:NUMERIC_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^([0-9]*\.[0-9]+(?:e|E)(?:\-|\+|)[0-9]+)/ then
        @output.push([:NUMERIC_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^([0-9]+(?:e|E)(?:\-|\+|)[0-9]+)/ then 
        @output.push([:NUMERIC_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^([0-9]*\.[0-9]+)/ then
        @output.push([:NUMERIC_LITERAL, $1]);   
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^([0-9]+)/ then 
        @output.push([:NUMERIC_LITERAL, $1]);
        @buffer = $'
        @regexp = false
      elsif @buffer =~ /^([_\$A-Za-z][_\$0-9A-Za-z]*)/ then
        token = $1
        @buffer = $'
        tokenId = isToken(token)
        if tokenId then
          @output.push([tokenId, token])
        else 
          @output.push([:IDENTIFIER, token]);
        end
        @regexp = false
      elsif @buffer =~ REOK3 or @buffer =~ REOK2 or @buffer =~ REOK1 then
        token = Regexp.last_match
#        ep "TTTTTTTTTTK:", token 
        @buffer = $'
        tokenId = isToken(token)
        if tokenId then
          @output.push([tokenId, token])
        else
          @output.push([token[0], token]);
        end
        @regexp = true
      elsif @buffer =~ RENG4 or @buffer =~ RENG3 or @buffer =~ RENG2 or @buffer =~ RENG1 then
        token = Regexp.last_match
        @buffer = $'
        tokenId = isToken(token)
        if tokenId then
          @output.push([tokenId, token])
        else
          @output.push([token[0], token])
        end
        @regexp = false
      end
      if saveBuffer.size > 0 and saveBuffer == @buffer then
        raise "token error!"
      end
    end
  end
  return result
end



def ep(*args)
  STDERR.print *args
end
def lep(*args)
  STDERR.print *args
end


def push(*args)
  raise "push: cannot push empty array" if args.size == 0
  raise "push: first element must be a symbol" if typeof(args[0]) != Symbol
#  ep "(#{args.join(':')}) "
  if args[0] == :lit then
    ep "(#{args[0]}=#{args[1]}) "
  else
    ep "(#{args[0]}) "
  end
  @stack.push(args)
end

def pop(*args)
  top = @stack.pop()
  if !top then
    raise "pop: stack top is nil! args:'#{args}'"
  end
  sym = args[0]
  if sym and sym != top[0] then 
    ep "\n==================\n"
    pp @stack
    raise "pop: found invlalid sym '#{top[0]}'(#{typeof(top[0])}) expected:#{sym}"
  else
    return top
  end
end

# get return or break
def poplaststat()
  top = @stack.pop()
  if top and top[0] == :break or top[0] == :return then
    return top
  else
    raise "poplaststat: not found!"
  end
end

# get statements reversed
def mpopstat()
  #ep "mpopstat(stacklen=#{@stack.size}}):"
  out=[]
  syms= { :if => true, :asign=>true, :function=>true, :call=>true, :deflocal=>true, :do=>true, :while=>true, :repeat=>true, :for=>true, :forin=>true }
  while true
    top = @stack.pop
    break if !top
    if syms[top[0]] then
      out.push(top)
    else
      #ep "[mpopstat:#{top[0]} is not allowed as a statement]"
      @stack.push(top)
      break
    end
  end
  if out.size==0 then
    ep "mpopstat: output is empty : \n"
    pp @stack
    raise "FATAL"
  end
  return out.reverse
end

# go through block and find last else placeholder
def findlastelse(blk)
#  pp "FFFFFFFFFFFFFFFFFF: findlastelse:", blk
  curblk = blk
  depth=0
  while true
    nextif = curblk[1]
    nextelse = nextif[3]
    if nextelse == nil then
      return nextif
    else
      depth+=1
      curblk = nextelse
    end
  end
  raise "should never reached"
end


def next_token
  @q.shift
end

def on_error(t,v,values)
  pp @stack
  raise "ERROR: t:#{t} v:#{v} values:#{values}\n"
end

def escapestr(s)
#  STDERR.print "ESCAPE:#{s}\n"
  ary = s.split("")
  out = []
  ary.each do |ch|
    if ch == "\n" then
      out.push( "\\n" )
    elsif ch == "\"" then
      out.push( "\\\"")
    elsif ch == "\\" then 
      out.push( "\\\\" )
    else
      out.push(ch)
    end
  end
  return out.join("")
end

def ary2s(ary)
  raise if !ary
  out= "s(" 
  if typeof(ary[0])!=Symbol 
    raise "first element have to be a symbol:#{typeof(ary[0])}, #{ary.join(':')}" 
  end
  ary.size.times do |i|
    o = ary[i]
    if typeof(o) == Symbol then
      out+= ":#{o}"
    elsif typeof(o) == Array then
      out+=ary2s(o)
    elsif typeof(o) == NilClass then
      out+="nil"
    elsif typeof(o) == String then
      out+= "\"" + escapestr(o) + "\""
    else
      out+= o.to_s
    end
    out+= "," if i < ary.size-1 
  end
  out+= ")"
  return out
end



# get string literal
def findstring(s)
  chars = nil
  top = s[0..0]
  multilinecount=0

  longtop = nil
  stype = nil
  if top == "\"" then
    stype = :NORMALSTR
    chars = s.split("")
    chars.shift
  elsif top == "'" then
    stype = :CHARSTR
    chars = s.split("")
    chars.shift
  elsif top == "[" and s =~ /^(\[(=*)\[)/ then
    stype = :LONGSTR
    longtop = $&
    chars = s[longtop.size..-1].split("")
#    print "LONG! TOP:#{longtop} chars.size:#{chars.size} longtop.size:#{longtop.size}\n"
  else
    return false
  end

  escaping = false
  out = ""
  while chars.size > 0
    ch = chars.shift
    if escaping then
      out+=ch
      # escape character
      if ch =~ /b|t|n|f|r|\"|\'|\\/
        escaping=false
      end
      # octal escaping
      if ch =~ /[0-9]/ then
        nch = chars.shift
        if nch =~ /[0-9]/ then
          nnch = chars.shift
          out+=nch
          if nnch =~ /[0-9]/ then
            out+=nnch
          else
            chars.unshift(nnch)
          end
        else
          chars.unshift(nch)
        end
        escaping=false
      end
      # unicode escape : TODO: \u notation not working in 5.1?
      next
    end

    if ch == "]" and longtop then 
      tofetch = longtop.size - 1 
      fetched = chars[0..(tofetch-1)]
      ok=true
      fetched.size.times do |i|
        if i==fetched.size-1 then
          if fetched[i]!="]" then
            ok = false
            break
          end
        else
          if fetched[i] != "=" then 
            ok = false
            break
          end
        end
      end
      if ok then 
        return out, longtop.size*2 + out.size
      end
    end

    if ch == "\"" and stype == :NORMALSTR then
      return out, out.size + 2 + multilinecount
    end
    if ch == "'" and stype == :CHARSTR then
      return out, out.size + 2 + multilinecount
    end

    if ch == "\\" then
      nch = chars.shift
      if nch == "\n" then
        out+="\n"
        multilinecount += 1
      else
        chars.unshift(nch)
        escaping = true
        out+=ch
      end
    else
      out+=ch
    end
  end
  return false
end


def parse(s,fmt,exectest)

  @lines = s.split("\n")
  @buffer = nil
  @parseOk = true #false
  @output = []
  @regexp = true
  @yylval = nil

  @q=[]   

  while true 
    ntk = get()
    p "tk: #{typeof(ntk[0])} #{ntk[0]} val:#{ntk[1]}"
    if typeof(ntk[0]) != Symbol and typeof(ntk[0]) != String and typeof(ntk[0]) != Fixnum then
      raise "FATAL: invalid type:#{typeof(ntk[0])}" 
    end

    if ntk[0] == 0 then
      lep "EEEEEEEEEEND"
      lep "scanner done\n"
      @q.push([ false, '$end' ])
      break
    else
      @q.push(ntk)
    end
  end
  
  


  @stack = []

  do_parse

#  pp @stack

  topary = @stack.pop
  if @stack.size > 0 then
    ep "stack mismatch! size:#{@stack.size} : \n"
    pp @stack
    raise "FATAL"
  end


  ep "\n"

  if fmt =="s" then
    print ary2s(topary),"\n"
  elsif fmt =="a" then
    pp topary
  end
  if exectest then
    src = "$cnt=0\ndef s(*args)\n$cnt+= args.size\nend\n" + ary2s(topary) + "\nprint $cnt,'\n'\n"
    begin
      eval(src)
    rescue Exception => e
      STDERR.print "FATAL: parse error: #{e}\n",src
      exit 1
    end
  end

end




##### State transition tables begin ###

clist = [
'128,148,148,262,86,148,373,170,171,109,109,128,109,361,211,86,109,288',
'109,173,174,172,128,187,371,269,385,145,109,381,138,140,109,261,149',
'161,150,162,149,281,150,138,140,81,82,83,84,85,277,314,188,189,138,140',
'81,82,83,84,85,210,134,135,136,137,139,141,127,129,130,131,133,134,135',
'136,137,139,141,127,129,130,131,133,134,135,136,137,139,141,127,129',
'130,131,133,89,17,22,282,27,208,109,41,46,187,56,-107,61,64,69,-108',
'77,2,6,10,18,158,159,264,31,37,109,207,50,54,58,62,66,71,75,79,188,189',
'12,16,20,24,29,33,39,44,48,49,89,17,22,275,27,206,276,41,46,226,56,227',
'61,64,69,205,77,2,6,10,18,214,215,359,31,37,109,105,50,54,58,62,66,71',
'75,79,285,286,12,16,20,24,29,33,39,44,48,49,89,17,22,284,27,313,109',
'41,46,109,56,110,61,64,69,311,77,2,6,10,18,170,171,203,31,37,109,198',
'50,54,58,62,66,71,75,79,138,140,12,16,20,24,29,33,39,44,48,49,89,17',
'22,335,27,336,197,41,46,301,56,190,61,64,69,86,77,2,6,10,18,86,170,171',
'31,37,170,171,50,54,58,62,66,71,75,79,109,300,12,16,20,24,29,33,39,44',
'48,49,89,90,22,88,91,186,81,82,83,84,85,297,81,82,83,84,85,173,174,172',
'89,90,22,337,91,173,174,172,50,54,58,62,66,71,75,79,338,179,12,16,20',
'24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,88,296,12,16,20,24,29,33',
'39,44,48,49,14,17,22,310,27,169,295,41,46,165,56,349,61,64,69,86,77',
'2,6,10,18,173,174,172,31,37,350,351,50,54,58,62,66,71,75,79,352,163',
'12,16,20,24,29,33,39,44,48,49,89,90,22,357,91,358,81,82,83,84,85,302',
'303,304,305,306,302,303,304,305,306,302,303,304,305,306,294,297,50,54',
'58,62,66,71,75,79,293,360,12,16,20,24,29,33,39,44,48,49,89,17,22,222',
'27,309,283,41,46,280,56,155,61,64,69,142,77,2,6,10,18,173,174,172,31',
'37,293,295,50,54,58,62,66,71,75,79,296,300,12,16,20,24,29,33,39,44,48',
'49,89,90,22,179,91,302,303,304,305,306,302,303,304,305,306,94,95,96',
'97,155,89,90,22,151,91,173,174,172,50,54,58,62,66,71,75,79,366,151,12',
'16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,223,215,12,16,20',
'24,29,33,39,44,48,49,89,90,22,145,91,289,290,291,292,94,95,96,97,289',
'290,291,292,166,167,168,89,90,22,272,91,173,174,172,50,54,58,62,66,71',
'75,79,145,142,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79',
'124,113,12,16,20,24,29,33,39,44,48,49,89,17,22,352,27,315,113,41,46',
'377,56,107,61,64,69,107,77,2,6,10,18,173,174,172,31,37,380,266,50,54',
'58,62,66,71,75,79,106,105,12,16,20,24,29,33,39,44,48,49,89,114,22,383',
'27,117,384,41,46,266,56,386,61,64,69,352,77,2,6,10,18,173,174,172,31',
'37,102,263,119,120,58,62,66,71,75,79,390,98,12,16,20,24,29,33,39,44',
'48,49,89,90,22,232,91,173,174,172,173,174,172,166,167,168,166,167,168',
'173,174,172,89,90,22,394,91,173,174,172,50,54,58,62,66,71,75,79,395',
'88,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,258,234,12',
'16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91',
',,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58',
'62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,14,17,22,,27,,,41,46',
',56,,61,64,69,,77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12',
'16,20,24,29,33,39,44,48,49,14,17,22,,27,,,41,46,,56,,61,64,69,,77,2',
'6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,14,17,22,,27,,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37,,,50',
'54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,14,17,22,,27,,',
'41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22',
',91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54',
'58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,',
',,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49',
'89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24',
'29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54',
'58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,89,17,22,,27,,,41,46,,56,,61,64',
'69,,77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29',
'33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,,,,,,,,,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,89,17,22,,27,,,41,46,,56,,61,64',
'69,,77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29',
'33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58',
'62,66,71,75,79,348,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89',
'90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49',
'50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91',
',,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24',
'29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16',
'20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,',
'50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62',
'66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,',
',,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90',
'22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16',
'20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62',
'66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22',
',91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54',
'58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,',
',,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49',
'89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24',
'29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54',
'58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89',
'90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49',
'50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91',
',,,,,,,,,,,,,,,,,,,,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39',
'44,48,49,89,17,22,,27,,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37,',
',50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91',
',,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24',
'29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16',
'20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,',
'50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62',
'66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,',
',,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,17',
'22,,27,,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37,,,50,54,58,62,66',
'71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,',
',,,,,,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89',
'17,22,,27,,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37,,,50,54,58,62',
'66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,',
',,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44',
'48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90',
'22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16',
'20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,,,,,,,,,50,54,58,62,66,71,75',
'79,,,12,16,20,24,29,33,39,44,48,49,89,17,22,,27,,,41,46,,56,,61,64,69',
',77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,89,17,22,,27,117,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31',
'37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22',
'220,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16',
'20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,89,17,22,,27,,,41,46,,56,,61,64,69,,77,2,6,10,18,,,,31,37',
',,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,',
'91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20',
'24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39',
'44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66',
'71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12',
'16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91',
',,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58',
'62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,',
',,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,260,,12,16,20,24,29,33',
'39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49',
'89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24',
'29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54',
'58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,50,54,58,62,66,71',
'75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,89',
'90,22,,91,,,250,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48',
'49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39,44,48,49,89,90,22',
',91,,,,,,,,,,,,,,,,89,90,22,,91,,,,50,54,58,62,66,71,75,79,,,12,16,20',
'24,29,33,39,44,48,49,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33,39',
'44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,,,,,,,,,50,54,58,62,66,71,75,79',
',,12,16,20,24,29,33,39,44,48,49,89,17,22,,27,,,41,46,,56,,61,64,69,',
'77,2,6,10,18,,,,31,37,,,50,54,58,62,66,71,75,79,,,12,16,20,24,29,33',
'39,44,48,49,89,90,22,,91,,,,,,,,,,,,,,,,,,,,,,,,50,54,58,62,66,71,75',
'79,,,12' ]
        racc_action_table = arr = ::Array.new(3944, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,100,55,177,194,40,353,257,257,231,370,240,125,325,125,1,325,240,221',
'343,343,343,322,206,353,200,370,357,200,364,34,34,364,177,100,55,100',
'55,40,231,40,240,240,194,194,194,194,194,221,270,206,206,322,322,1,1',
'1,1,1,124,34,34,34,34,34,34,34,34,34,34,34,240,240,240,240,240,240,240',
'240,240,240,240,322,322,322,322,322,322,322,322,322,322,322,121,121',
'121,233,121,121,233,121,121,91,121,120,121,121,121,119,121,121,121,121',
'121,53,53,195,121,121,195,118,121,121,121,121,121,121,121,121,91,91',
'121,121,121,121,121,121,121,121,121,121,386,386,386,218,386,116,218',
'386,386,152,386,152,386,386,386,115,386,386,386,386,386,144,144,319',
'386,386,319,114,386,386,386,386,386,386,386,386,239,239,386,386,386',
'386,386,386,386,386,386,386,385,385,385,235,385,269,235,385,385,21,385',
'21,385,385,385,268,385,385,385,385,385,72,72,111,385,385,111,102,385',
'385,385,385,385,385,385,385,103,103,385,385,385,385,385,385,385,385',
'385,385,381,381,381,298,381,298,101,381,381,251,381,93,381,381,381,192',
'381,381,381,381,381,191,255,255,381,381,256,256,381,381,381,381,381',
'381,381,381,92,250,381,381,381,381,381,381,381,381,381,381,380,380,380',
'89,380,87,192,192,192,192,192,249,191,191,191,191,191,345,345,345,16',
'16,16,299,16,346,346,346,380,380,380,380,380,380,380,380,300,79,380',
'380,380,380,380,380,380,380,380,380,16,16,16,16,16,16,16,16,77,247,16',
'16,16,16,16,16,16,16,16,16,367,367,367,267,367,69,245,367,367,64,367',
'309,367,367,367,193,367,367,367,367,367,185,185,185,367,367,310,311',
'367,367,367,367,367,367,367,367,313,56,367,367,367,367,367,367,367,367',
'367,367,366,366,366,315,366,318,193,193,193,193,193,328,328,328,328',
'328,327,327,327,327,327,252,252,252,252,252,244,321,366,366,366,366',
'366,366,366,366,243,323,366,366,366,366,366,366,366,366,366,366,361',
'361,361,150,361,265,234,361,361,230,361,229,361,361,361,228,361,361',
'361,361,361,184,184,184,361,361,332,333,361,361,361,361,361,361,361',
'361,334,335,361,361,361,361,361,361,361,361,361,361,20,20,20,262,20',
'326,326,326,326,326,329,329,329,329,329,201,201,201,201,45,360,360,360',
'41,360,183,183,183,20,20,20,20,20,20,20,20,341,226,20,20,20,20,20,20',
'20,20,20,20,360,360,360,360,360,360,360,360,151,216,360,360,360,360',
'360,360,360,360,360,360,22,22,22,215,22,241,241,241,241,9,9,9,9,330',
'330,330,330,67,67,67,24,24,24,214,24,76,76,76,22,22,22,22,22,22,22,22',
'37,35,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,30,213,24',
'24,24,24,24,24,24,24,24,24,358,358,358,354,358,272,26,358,358,359,358',
'204,358,358,358,19,358,358,358,358,358,248,248,248,358,358,363,198,358',
'358,358,358,358,358,358,358,18,17,358,358,358,358,358,358,358,358,358',
'358,27,27,27,368,27,27,369,27,27,197,27,371,27,27,27,372,27,27,27,27',
'27,182,182,182,27,27,14,178,27,27,27,27,27,27,27,27,382,10,27,27,27',
'27,27,27,27,27,27,27,29,29,29,162,29,181,181,181,180,180,180,253,253',
'253,254,254,254,344,344,344,352,352,352,387,352,342,342,342,29,29,29',
'29,29,29,29,29,388,2,29,29,29,29,29,29,29,29,29,29,352,352,352,352,352',
'352,352,352,175,164,352,352,352,352,352,352,352,352,352,352,31,31,31',
',31,,,,,,,,,,,,,,,,33,33,33,,33,,,,31,31,31,31,31,31,31,31,,,31,31,31',
'31,31,31,31,31,31,31,33,33,33,33,33,33,33,33,,,33,33,33,33,33,33,33',
'33,33,33,0,0,0,,0,,,0,0,,0,,0,0,0,,0,0,0,0,0,,,,0,0,,,0,0,0,0,0,0,0',
'0,,,0,0,0,0,0,0,0,0,0,0,351,351,351,,351,,,351,351,,351,,351,351,351',
',351,351,351,351,351,,,,351,351,,,351,351,351,351,351,351,351,351,,',
'351,351,351,351,351,351,351,351,351,351,36,36,36,,36,,,36,36,,36,,36',
'36,36,,36,36,36,36,36,,,,36,36,,,36,36,36,36,36,36,36,36,,,36,36,36',
'36,36,36,36,36,36,36,350,350,350,,350,,,350,350,,350,,350,350,350,,350',
'350,350,350,350,,,,350,350,,,350,350,350,350,350,350,350,350,,,350,350',
'350,350,350,350,350,350,350,350,39,39,39,,39,,,,,,,,,,,,,,,,173,173',
'173,,173,,,,39,39,39,39,39,39,39,39,,,39,39,39,39,39,39,39,39,39,39',
'173,173,173,173,173,173,173,173,,,173,173,173,173,173,173,173,173,173',
'173,338,338,338,,338,,,,,,,,,,,,,,,,44,44,44,,44,,,,338,338,338,338',
'338,338,338,338,,,338,338,338,338,338,338,338,338,338,338,44,44,44,44',
'44,44,44,44,,,44,44,44,44,44,44,44,44,44,44,337,337,337,,337,,,,,,,',
',,,,,,,,48,48,48,,48,,,,337,337,337,337,337,337,337,337,,,337,337,337',
'337,337,337,337,337,337,337,48,48,48,48,48,48,48,48,,,48,48,48,48,48',
'48,48,48,48,48,49,49,49,,49,,,,,,,,,,,,,,,,336,336,336,,336,,,,49,49',
'49,49,49,49,49,49,,,49,49,49,49,49,49,49,49,49,49,336,336,336,336,336',
'336,336,336,,,336,336,336,336,336,336,336,336,336,336,390,390,390,,390',
',,390,390,,390,,390,390,390,,390,390,390,390,390,,,,390,390,,,390,390',
'390,390,390,390,390,390,,,390,390,390,390,390,390,390,390,390,390,314',
'314,314,,314,,,,,,,,,,,,,,,,,,,,,,,,314,314,314,314,314,314,314,314',
',,314,314,314,314,314,314,314,314,314,314,61,61,61,,61,,,61,61,,61,',
'61,61,61,,61,61,61,61,61,,,,61,61,,,61,61,61,61,61,61,61,61,,,61,61',
'61,61,61,61,61,61,61,61,307,307,307,,307,,,,,,,,,,,,,,,,306,306,306',
',306,,,,307,307,307,307,307,307,307,307,307,,307,307,307,307,307,307',
'307,307,307,307,306,306,306,306,306,306,306,306,,,306,306,306,306,306',
'306,306,306,306,306,305,305,305,,305,,,,,,,,,,,,,,,,304,304,304,,304',
',,,305,305,305,305,305,305,305,305,,,305,305,305,305,305,305,305,305',
'305,305,304,304,304,304,304,304,304,304,,,304,304,304,304,304,304,304',
'304,304,304,303,303,303,,303,,,,,,,,,,,,,,,,302,302,302,,302,,,,303',
'303,303,303,303,303,303,303,,,303,303,303,303,303,303,303,303,303,303',
'302,302,302,302,302,302,302,302,,,302,302,302,302,302,302,302,302,302',
'302,301,301,301,,301,,,,,,,,,,,,,,,,81,81,81,,81,,,,301,301,301,301',
'301,301,301,301,,,301,301,301,301,301,301,301,301,301,301,81,81,81,81',
'81,81,81,81,,,81,81,81,81,81,81,81,81,81,81,82,82,82,,82,,,,,,,,,,,',
',,,,83,83,83,,83,,,,82,82,82,82,82,82,82,82,,,82,82,82,82,82,82,82,82',
'82,82,83,83,83,83,83,83,83,83,,,83,83,83,83,83,83,83,83,83,83,84,84',
'84,,84,,,,,,,,,,,,,,,,85,85,85,,85,,,,84,84,84,84,84,84,84,84,,,84,84',
'84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,,,85,85,85,85,85,85',
'85,85,85,85,86,86,86,,86,,,,,,,,,,,,,,,,297,297,297,,297,,,,86,86,86',
'86,86,86,86,86,,,86,86,86,86,86,86,86,86,86,86,297,297,297,297,297,297',
'297,297,,,297,297,297,297,297,297,297,297,297,297,296,296,296,,296,',
',,,,,,,,,,,,,,295,295,295,,295,,,,296,296,296,296,296,296,296,296,,',
'296,296,296,296,296,296,296,296,296,296,295,295,295,295,295,295,295',
'295,,,295,295,295,295,295,295,295,295,295,295,294,294,294,,294,,,,,',
',,,,,,,,,,293,293,293,,293,,,,294,294,294,294,294,294,294,294,,,294',
'294,294,294,294,294,294,294,294,294,293,293,293,293,293,293,293,293',
',,293,293,293,293,293,293,293,293,293,293,94,94,94,,94,,,,,,,,,,,,,',
',,95,95,95,,95,,,,94,94,94,94,94,94,94,94,,,94,94,94,94,94,94,94,94',
'94,94,95,95,95,95,95,95,95,95,,,95,95,95,95,95,95,95,95,95,95,96,96',
'96,,96,,,,,,,,,,,,,,,,97,97,97,,97,,,,96,96,96,96,96,96,96,96,,,96,96',
'96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,,,97,97,97,97,97,97',
'97,97,97,97,98,98,98,,98,,,,,,,,,,,,,,,,292,292,292,,292,,,,98,98,98',
'98,98,98,98,98,,,98,98,98,98,98,98,98,98,98,98,292,292,292,292,292,292',
'292,292,,,292,292,292,292,292,292,292,292,292,292,291,291,291,,291,',
',,,,,,,,,,,,,,290,290,290,,290,,,,291,291,291,291,291,291,291,291,,',
'291,291,291,291,291,291,291,291,291,291,290,290,290,290,290,290,290',
'290,,,290,290,290,290,290,290,290,290,290,290,289,289,289,,289,,,,,',
',,,,,,,,,,,,,,,,,,289,289,289,289,289,289,289,289,,,289,289,289,289',
'289,289,289,289,289,289,105,105,105,,105,,,105,105,,105,,105,105,105',
',105,105,105,105,105,,,,105,105,,,105,105,105,105,105,105,105,105,,',
'105,105,105,105,105,105,105,105,105,105,106,106,106,,106,,,,,,,,,,,',
',,,,107,107,107,,107,,,,106,106,106,106,106,106,106,106,,,106,106,106',
'106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,,,107,107',
'107,107,107,107,107,107,107,107,109,109,109,,109,,,,,,,,,,,,,,,,288',
'288,288,,288,,,,109,109,109,109,109,109,109,109,,,109,109,109,109,109',
'109,109,109,109,109,288,288,288,288,288,288,288,288,,,288,288,288,288',
'288,288,288,288,288,288,113,113,113,,113,,,,,,,,,,,,,,,,287,287,287',
',287,,,,113,113,113,113,113,113,113,113,,,113,113,113,113,113,113,113',
'113,113,113,287,287,287,287,287,287,287,287,,,287,287,287,287,287,287',
'287,287,287,287,286,286,286,,286,,,,,,,,,,,,,,,,285,285,285,,285,,,',
'286,286,286,286,286,286,286,286,,,286,286,286,286,286,286,286,286,286',
'286,285,285,285,285,285,285,285,285,,,285,285,285,285,285,285,285,285',
'285,285,284,284,284,,284,,,284,284,,284,,284,284,284,,284,284,284,284',
'284,,,,284,284,,,284,284,284,284,284,284,284,284,,,284,284,284,284,284',
'284,284,284,284,284,283,283,283,,283,,,,,,,,,,,,,,,,,,,,,,,,283,283',
'283,283,283,283,283,283,,,283,283,283,283,283,283,283,283,283,283,282',
'282,282,,282,,,282,282,,282,,282,282,282,,282,282,282,282,282,,,,282',
'282,,,282,282,282,282,282,282,282,282,,,282,282,282,282,282,282,282',
'282,282,282,6,6,6,,6,,,,,,,,,,,,,,,,280,280,280,,280,,,,6,6,6,6,6,6',
'6,6,,,6,6,6,6,6,6,6,6,6,6,280,280,280,280,280,280,280,280,,,280,280',
'280,280,280,280,280,280,280,280,276,276,276,,276,,,,,,,,,,,,,,,,132',
'132,132,,132,,,,276,276,276,276,276,276,276,276,,,276,276,276,276,276',
'276,276,276,276,276,132,132,132,132,132,132,132,132,,,132,132,132,132',
'132,132,132,132,132,132,142,142,142,,142,,,,,,,,,,,,,,,,,,,,,,,,142',
'142,142,142,142,142,142,142,,,142,142,142,142,142,142,142,142,142,142',
'264,264,264,,264,,,264,264,,264,,264,264,264,,264,264,264,264,264,,',
',264,264,,,264,264,264,264,264,264,264,264,,,264,264,264,264,264,264',
'264,264,264,264,145,145,145,,145,145,,145,145,,145,,145,145,145,,145',
'145,145,145,145,,,,145,145,,,145,145,145,145,145,145,145,145,,,145,145',
'145,145,145,145,145,145,145,145,148,148,148,148,148,,,,,,,,,,,,,,,,149',
'149,149,,149,,,,148,148,148,148,148,148,148,148,,,148,148,148,148,148',
'148,148,148,148,148,149,149,149,149,149,149,149,149,,,149,149,149,149',
'149,149,149,149,149,149,391,391,391,,391,,,391,391,,391,,391,391,391',
',391,391,391,391,391,,,,391,391,,,391,391,391,391,391,391,391,391,,',
'391,391,391,391,391,391,391,391,391,391,223,223,223,,223,,,,,,,,,,,',
',,,,207,207,207,,207,,,,223,223,223,223,223,223,223,223,,,223,223,223',
'223,223,223,223,223,223,223,207,207,207,207,207,207,207,207,,,207,207',
'207,207,207,207,207,207,207,207,155,155,155,,155,,,,,,,,,,,,,,,,158',
'158,158,,158,,,,155,155,155,155,155,155,155,155,,,155,155,155,155,155',
'155,155,155,155,155,158,158,158,158,158,158,158,158,,,158,158,158,158',
'158,158,158,158,158,158,159,159,159,,159,,,,,,,,,,,,,,,,161,161,161',
',161,,,,159,159,159,159,159,159,159,159,,,159,159,159,159,159,159,159',
'159,159,159,161,161,161,161,161,161,161,161,,,161,161,161,161,161,161',
'161,161,161,161,176,176,176,,176,,,,,,,,,,,,,,,,163,163,163,,163,,,',
'176,176,176,176,176,176,176,176,176,,176,176,176,176,176,176,176,176',
'176,176,163,163,163,163,163,163,163,163,,,163,163,163,163,163,163,163',
'163,163,163,174,174,174,,174,,,,,,,,,,,,,,,,165,165,165,,165,,,,174',
'174,174,174,174,174,174,174,,,174,174,174,174,174,174,174,174,174,174',
'165,165,165,165,165,165,165,165,,,165,165,165,165,165,165,165,165,165',
'165,166,166,166,,166,,,,,,,,,,,,,,,,167,167,167,,167,,,,166,166,166',
'166,166,166,166,166,,,166,166,166,166,166,166,166,166,166,166,167,167',
'167,167,167,167,167,167,,,167,167,167,167,167,167,167,167,167,167,168',
'168,168,,168,,,,,,,,,,,,,,,,169,169,169,,169,,,169,168,168,168,168,168',
'168,168,168,,,168,168,168,168,168,168,168,168,168,168,169,169,169,169',
'169,169,169,169,,,169,169,169,169,169,169,169,169,169,169,170,170,170',
',170,,,,,,,,,,,,,,,,171,171,171,,171,,,,170,170,170,170,170,170,170',
'170,,,170,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171',
'171,171,,,171,171,171,171,171,171,171,171,171,171,172,172,172,,172,',
',,,,,,,,,,,,,,,,,,,,,,172,172,172,172,172,172,172,172,,,172,172,172',
'172,172,172,172,172,172,172,395,395,395,,395,,,395,395,,395,,395,395',
'395,,395,395,395,395,395,,,,395,395,,,395,395,395,395,395,395,395,395',
',,395,395,395,395,395,395,395,395,395,395,12,12,12,,12,,,,,,,,,,,,,',
',,,,,,,,,,12,12,12,12,12,12,12,12,,,12' ]
        racc_action_check = arr = ::Array.new(3944, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   863,    -2,   763,   nil,   nil,   nil,  2867,   nil,   nil,   513,
   714,   nil,  3903,   nil,   704,   nil,   303,   646,   665,   583,
   495,   190,   563,   nil,   583,   nil,   573,   679,   nil,   727,
   621,   795,   nil,   815,   -11,   535,   959,   595,   nil,  1055,
     1,   517,   nil,   nil,  1143,   448,   nil,   nil,  1211,  1259,
   nil,   nil,   nil,    45,   nil,    -2,   386,   nil,   nil,   nil,
   nil,  1423,   nil,   nil,   358,   nil,   nil,   532,   nil,   354,
   nil,   nil,   164,   nil,   nil,   nil,   537,   338,   nil,   314,
   nil,  1695,  1743,  1763,  1811,  1831,  1879,   280,   nil,   285,
   nil,    99,   265,   238,  2083,  2103,  2151,  2171,  2219,   nil,
    -3,   239,   212,   184,   nil,  2403,  2451,  2471,   nil,  2519,
   nil,   207,   nil,  2587,   144,   149,   138,   nil,    96,    84,
    80,    91,   nil,   nil,    59,     4,   nil,   nil,   nil,   nil,
   nil,   nil,  2955,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3003,   nil,   134,  3099,   nil,   nil,  3147,  3167,
   449,   542,   142,   nil,   nil,  3331,   nil,   nil,  3351,  3399,
   nil,  3419,   729,  3487,   771,  3555,  3603,  3623,  3671,  3691,
  3739,  3759,  3807,  1075,  3535,   775,  3467,    -5,   700,   nil,
   684,   681,   649,   469,   417,   321,   nil,   nil,   nil,   nil,
   nil,   241,   235,   351,   -13,   111,   nil,   687,   657,   nil,
    20,   451,   nil,   nil,   579,   nil,    20,  3283,   nil,   nil,
   nil,   nil,   nil,   556,   584,   562,   525,   nil,   139,   nil,
   nil,    10,   nil,  3263,   nil,   nil,   531,   nil,   397,   392,
   434,     1,   nil,    91,   451,   187,   nil,   nil,   nil,   108,
     0,   509,   nil,   372,   419,   293,   nil,   275,   601,   228,
   271,   236,   366,   690,   693,   213,   217,   -39,   nil,   nil,
   nil,   nil,   492,   nil,  3051,   446,   nil,   351,   199,   188,
    25,   nil,   635,   nil,   nil,   nil,  2935,   nil,   nil,   nil,
  2887,   nil,  2819,  2771,  2723,  2675,  2655,  2607,  2539,  2355,
  2307,  2287,  2239,  2035,  2015,  1967,  1947,  1899,   232,   291,
   310,  1675,  1627,  1607,  1559,  1539,  1491,  1471,   nil,   361,
   373,   374,   nil,   366,  1375,   399,   nil,   nil,   393,   159,
   nil,   360,    11,   414,   nil,     8,   446,   361,   356,   451,
   517,   nil,   410,   410,   418,   483,  1279,  1191,  1123,   nil,
   nil,   523,   701,   -34,   693,   249,   257,   nil,   nil,   nil,
  1007,   911,   747,    -1,   613,   nil,   nil,    21,   631,   632,
   515,   447,   nil,   649,    24,   nil,   399,   351,   677,   680,
     2,   668,   673,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   283,   235,   712,   nil,   nil,   187,   139,   745,   760,   nil,
  1327,  3215,   nil,   nil,   nil,  3855,   nil,   nil ]

racc_action_default = [
  -223,  -163,   -14,   -18,  -109,  -213,  -219,   -19,   -91,  -173,
  -223,   -20,  -223,   -92,   -14,   -21,  -223,   -89,  -223,  -177,
  -223,  -223,  -223,   -22,  -223,   -23,  -181,  -223,   -24,  -223,
  -223,  -223,   -25,  -223,  -126,  -185,    -1,  -223,   -26,  -223,
  -114,  -223,   -11,   -27,  -223,  -189,   -44,   -28,  -223,  -223,
   -82,   -29,  -124,  -193,   -83,  -125,  -223,  -110,   -84,  -197,
  -129,  -223,   -85,  -139,  -223,    -8,   -86,  -143,   -90,  -223,
   -10,   -87,  -146,   -80,   -16,   -88,  -150,   -14,   -17,  -221,
   -81,  -223,  -223,  -223,  -223,  -223,  -223,  -223,   -15,   -14,
   -89,  -102,  -220,  -223,  -223,  -223,  -223,  -223,  -223,  -115,
  -114,  -223,  -223,  -126,  -133,  -223,  -223,  -223,  -134,  -223,
   -45,  -223,  -130,  -223,   -89,  -223,  -103,   -30,  -223,   -82,
   -83,  -223,   -32,  -131,  -223,  -223,  -132,  -208,  -201,  -209,
  -210,  -211,  -223,  -212,  -202,  -203,  -204,  -205,  -127,  -206,
  -128,  -207,  -223,    -9,  -223,  -223,  -135,  -116,  -223,  -223,
  -223,   -74,   -35,   -36,  -136,  -223,  -137,  -138,  -223,  -223,
  -117,  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -217,
  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -222,   -99,
  -151,  -152,  -153,  -154,  -155,  -156,   -55,  -106,  -108,  -107,
   -56,  -164,  -165,  -166,  -167,  -223,  -113,   -12,   -12,   -65,
  -223,  -174,  -214,   -93,  -178,  -101,  -223,  -223,   -31,   -33,
   398,   -66,  -198,  -182,  -223,  -223,   -67,   -68,  -223,  -122,
  -120,  -223,  -112,  -223,   -40,   -75,  -223,   -34,  -186,  -190,
  -223,  -223,  -119,  -223,  -223,  -223,  -140,  -141,  -142,  -195,
  -126,  -175,  -199,  -179,  -218,  -183,  -215,  -187,  -157,  -191,
  -223,  -223,  -168,  -144,  -145,  -149,  -147,  -148,   -54,   -97,
   -94,   -95,  -221,  -100,  -223,   -13,    -4,  -223,  -223,  -223,
  -223,  -104,  -223,   -71,   -69,  -121,  -223,  -111,   -42,   -37,
  -223,  -118,  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -223,
  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -223,  -223,   -38,
   -76,  -219,  -223,  -223,  -223,  -223,  -223,  -223,   -57,  -223,
  -223,  -223,   -58,   -78,  -223,  -223,  -123,  -194,   -47,  -223,
   -49,  -192,  -126,  -223,  -200,  -223,  -169,  -170,  -171,  -172,
  -176,  -216,  -180,  -184,  -188,  -223,  -219,  -223,  -223,   -41,
   -77,  -223,  -158,  -159,  -160,  -161,  -162,   -98,   -96,    -5,
    -6,    -6,  -223,  -223,   -79,   -61,  -105,  -223,  -223,  -223,
  -223,  -223,   -39,  -223,  -223,   -43,  -219,    -7,  -223,  -223,
  -223,  -223,   -78,   -59,   -62,   -70,   -46,   -48,  -196,   -52,
  -219,  -223,  -223,    -3,    -2,   -72,   -72,  -223,  -223,   -53,
  -223,   -73,   -63,   -64,   -60,  -223,   -50,   -51 ]

racc_goto_table = [
    92,   144,    93,   143,   299,   122,   180,   181,   182,   183,
   184,   185,   246,   153,   176,    87,   111,   147,    30,   217,
   353,   191,   192,   193,   194,   125,   368,   369,   202,   255,
   256,   257,   160,   104,   391,   391,   103,   108,   374,   164,
   103,   112,   267,   268,   103,   372,   123,   253,   254,   103,
   126,   212,   216,   103,   392,   393,   146,   312,   251,   103,
   177,   154,   270,   100,   103,   156,   157,   219,   103,   103,
   326,   327,   328,   329,   340,    99,   218,   196,   230,   387,
   225,   339,   224,   199,   298,   152,    36,   201,   330,   362,
   175,   274,   195,   204,   248,   259,   332,   213,   333,   209,
   200,   103,   103,   103,   103,   103,   103,   228,   334,   229,
   321,   132,   244,   nil,   103,   103,   103,   103,   nil,   nil,
   nil,   nil,   nil,   122,   nil,   nil,   271,   103,   nil,   323,
   324,   nil,   nil,   103,   nil,   nil,   nil,   331,   nil,   nil,
   nil,   nil,   278,   221,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   231,   nil,   233,   nil,   235,
   nil,   nil,   103,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   103,   nil,   nil,   103,   273,
   nil,   365,   nil,   236,   237,   238,   103,   103,   103,   240,
   103,   103,   103,   103,   103,   316,   nil,   307,   279,   317,
   nil,   nil,   nil,   378,   nil,   nil,   nil,   nil,   nil,   nil,
   248,   248,   248,   nil,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   nil,   nil,   nil,   347,   342,   343,   344,
   345,   346,   nil,   356,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   308,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   318,   nil,   320,   248,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,   nil,   nil,
   nil,   nil,   325,   nil,   nil,   248,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    92,   nil,   341,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   103,   322,   322,   nil,   103,
   103,   103,   103,   103,   322,   103,   103,   103,   nil,   nil,
   nil,   375,   103,   103,   103,   103,   103,   nil,   nil,   nil,
    92,   364,   363,   nil,   143,   nil,   376,   nil,   nil,   379,
   nil,   nil,   nil,   nil,   nil,   nil,   370,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   322,   389,
    92,   nil,   382,   122,   122,   nil,   nil,   nil,   396,   209,
   nil,   nil,   nil,   397,    92,   nil,   388,   nil,   nil,   nil,
   322 ]

racc_goto_check = [
    36,    11,    38,     9,    29,    10,    69,    69,    69,    69,
    69,    69,    35,    27,    54,     7,    36,    61,     1,    47,
    41,    70,    70,    70,    70,    36,     5,     5,    33,    68,
    68,    68,    61,    66,    25,    25,    39,    66,    44,    10,
    39,    66,     4,     4,    39,    42,    66,    67,    67,    39,
    66,    33,    46,    39,    45,    45,    66,    40,    37,    39,
    55,    66,    59,    60,    39,    66,    66,    33,    39,    39,
    71,    71,    71,    71,    34,    62,    64,    61,    33,    41,
    32,    31,    30,    10,    28,    26,     2,    72,    73,    29,
     7,    47,    36,    74,    69,    33,    75,    76,    77,    10,
    36,    39,    39,    39,    39,    39,    39,    78,    79,    80,
    81,    86,    87,   nil,    39,    39,    39,    39,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,    33,    39,   nil,    35,
    35,   nil,   nil,    39,   nil,   nil,   nil,    35,   nil,   nil,
   nil,   nil,    33,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,    36,   nil,    36,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    39,    11,
   nil,    35,   nil,    66,    66,    66,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    33,   nil,    54,    27,    33,
   nil,   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,
    69,    69,    69,   nil,    69,    69,    69,    69,    69,    69,
    69,    69,    69,   nil,   nil,   nil,    33,    69,    69,    69,
    69,    69,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,    10,    69,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,    36,   nil,   nil,    69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    39,    39,   nil,    39,
    39,    39,    39,    39,    39,    39,    39,    39,   nil,   nil,
   nil,    11,    39,    39,    39,    39,    39,   nil,   nil,   nil,
    36,    36,    38,   nil,     9,   nil,    10,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    10,
    36,   nil,    38,    10,    10,   nil,   nil,   nil,    10,    10,
   nil,   nil,   nil,    10,    36,   nil,    38,   nil,   nil,   nil,
    39 ]

racc_goto_pointer = [
   nil,    18,    86,   nil,  -155,  -324,   nil,    13,   nil,   -33,
   -22,   -36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -351,    44,   -28,  -166,  -246,
   -69,  -219,   -71,   -81,  -226,  -157,    -6,  -111,    -4,    20,
  -212,  -293,  -308,   nil,  -316,  -331,   -92,  -125,   nil,   nil,
   nil,   nil,   nil,   nil,   -65,   -19,   nil,   nil,   nil,  -144,
    51,   -23,    63,   nil,   -72,   nil,    17,  -123,  -143,   -75,
   -73,  -219,   -20,  -205,   -20,  -199,   -45,  -198,   -48,  -189,
   -49,  -175,   nil,   nil,   nil,   nil,    77,   -57 ]

racc_goto_default = [
   nil,   nil,   367,    42,   nil,   nil,    57,   101,   265,    65,
    70,    74,    78,     3,     7,    11,    15,    23,    25,    28,
    32,    38,    43,    47,    51,   121,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,    21,   nil,   nil,    34,
   nil,   nil,   nil,   354,   355,   nil,   nil,   nil,    68,    73,
    80,     4,     8,    13,   nil,   nil,   178,   115,   116,   118,
    40,   nil,    52,    55,   nil,    60,    63,    67,    72,    76,
     1,   252,     9,   241,    19,   243,    26,   245,    35,   247,
    45,   249,    53,   239,    59,   242,   287,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 83, :_reduce_none,
  8, 85, :_reduce_none,
  8, 88, :_reduce_none,
  1, 90, :_reduce_none,
  3, 90, :_reduce_none,
  0, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 84, :_reduce_none,
  2, 84, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  0, 86, :_reduce_none,
  1, 86, :_reduce_none,
  0, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  2, 93, :_reduce_none,
  3, 93, :_reduce_none,
  1, 107, :_reduce_none,
  2, 107, :_reduce_none,
  3, 94, :_reduce_34,
  2, 94, :_reduce_35,
  1, 108, :_reduce_36,
  3, 108, :_reduce_37,
  1, 110, :_reduce_38,
  3, 110, :_reduce_39,
  2, 109, :_reduce_none,
  2, 111, :_reduce_none,
  2, 114, :_reduce_none,
  2, 116, :_reduce_none,
  1, 95, :_reduce_none,
  2, 96, :_reduce_none,
  7, 97, :_reduce_none,
  5, 97, :_reduce_none,
  7, 98, :_reduce_none,
  5, 98, :_reduce_none,
  9, 98, :_reduce_none,
  10, 98, :_reduce_none,
  7, 98, :_reduce_none,
  8, 98, :_reduce_none,
  3, 99, :_reduce_none,
  3, 100, :_reduce_none,
  3, 101, :_reduce_none,
  5, 102, :_reduce_none,
  5, 104, :_reduce_none,
  3, 122, :_reduce_none,
  5, 122, :_reduce_none,
  1, 125, :_reduce_none,
  2, 125, :_reduce_none,
  4, 126, :_reduce_none,
  3, 124, :_reduce_none,
  3, 103, :_reduce_none,
  3, 105, :_reduce_none,
  3, 106, :_reduce_none,
  3, 106, :_reduce_none,
  4, 106, :_reduce_none,
  5, 128, :_reduce_none,
  2, 129, :_reduce_none,
  0, 127, :_reduce_none,
  1, 127, :_reduce_none,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  0, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 131, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 133, :_reduce_none,
  3, 134, :_reduce_none,
  3, 134, :_reduce_none,
  5, 134, :_reduce_none,
  2, 137, :_reduce_none,
  4, 137, :_reduce_none,
  1, 138, :_reduce_none,
  2, 138, :_reduce_none,
  3, 135, :_reduce_none,
  0, 139, :_reduce_none,
  1, 139, :_reduce_none,
  3, 140, :_reduce_none,
  5, 140, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  4, 142, :_reduce_none,
  3, 142, :_reduce_none,
  3, 142, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  4, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 143, :_reduce_none,
  3, 143, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  2, 147, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_none,
  3, 149, :_reduce_none,
  3, 149, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_none,
  3, 150, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_none,
  3, 151, :_reduce_none,
  3, 151, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_none,
  3, 153, :_reduce_none,
  3, 153, :_reduce_none,
  3, 153, :_reduce_none,
  3, 153, :_reduce_none,
  1, 154, :_reduce_none,
  3, 154, :_reduce_none,
  3, 154, :_reduce_none,
  3, 154, :_reduce_none,
  3, 154, :_reduce_none,
  1, 155, :_reduce_none,
  3, 155, :_reduce_none,
  3, 155, :_reduce_none,
  3, 155, :_reduce_none,
  3, 155, :_reduce_none,
  1, 156, :_reduce_none,
  3, 156, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_none,
  1, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_none,
  1, 165, :_reduce_none,
  3, 165, :_reduce_none,
  1, 166, :_reduce_none,
  5, 166, :_reduce_none,
  1, 167, :_reduce_none,
  5, 167, :_reduce_none,
  1, 115, :_reduce_none,
  3, 115, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_none,
  1, 169, :_reduce_none,
  3, 169, :_reduce_none,
  0, 119, :_reduce_none,
  1, 119, :_reduce_none,
  0, 120, :_reduce_none,
  1, 120, :_reduce_none,
  0, 136, :_reduce_none,
  1, 136, :_reduce_none ]

racc_reduce_n = 223

racc_shift_n = 398

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :IDENTIFIER => 3,
  "(" => 4,
  ")" => 5,
  "{" => 6,
  "}" => 7,
  "," => 8,
  :VAR => 9,
  ";" => 10,
  "=" => 11,
  :IF => 12,
  :ELSE => 13,
  :DO => 14,
  :WHILE => 15,
  :FOR => 16,
  :IN => 17,
  :CONTINUE => 18,
  :BREAK => 19,
  :RETURN => 20,
  :WITH => 21,
  :SWITCH => 22,
  :CASE => 23,
  ":" => 24,
  :DEFAULT => 25,
  :THROW => 26,
  :TRY => 27,
  :CATCH => 28,
  :FINALLY => 29,
  :NUMERIC_LITERAL => 30,
  :STRING_LITERAL => 31,
  :REGEXP_LITERAL => 32,
  :NULL => 33,
  :TRUE => 34,
  :FALSE => 35,
  :THIS => 36,
  "[" => 37,
  "]" => 38,
  "." => 39,
  :NEW => 40,
  :INCREMENT => 41,
  :DECREMENT => 42,
  :DELETE => 43,
  :VOID => 44,
  :TYPEOF => 45,
  "+" => 46,
  "-" => 47,
  "~" => 48,
  "!" => 49,
  "*" => 50,
  "/" => 51,
  "%" => 52,
  :SHIFT_LEFT => 53,
  :SHIFT_RIGHT => 54,
  :U_SHIFT_RIGHT => 55,
  "<" => 56,
  ">" => 57,
  :LESS_EQUAL => 58,
  :GRATER_EQUAL => 59,
  :INSTANCEOF => 60,
  :EQUAL => 61,
  :NOT_EQUAL => 62,
  :EQ => 63,
  :NOT_EQ => 64,
  "&" => 65,
  "^" => 66,
  "|" => 67,
  :LOGICAL_AND => 68,
  :LOGICAL_OR => 69,
  "?" => 70,
  :MUL_LET => 71,
  :DIV_LET => 72,
  :MOD_LET => 73,
  :ADD_LET => 74,
  :SUB_LET => 75,
  :SHIFT_LEFT_LET => 76,
  :SHIFT_RIGHT_LET => 77,
  :U_SHIFT_RIGHT_LET => 78,
  :AND_LET => 79,
  :NOT_LET => 80,
  :OR_LET => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "IDENTIFIER",
  "\"(\"",
  "\")\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "VAR",
  "\";\"",
  "\"=\"",
  "IF",
  "ELSE",
  "DO",
  "WHILE",
  "FOR",
  "IN",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "WITH",
  "SWITCH",
  "CASE",
  "\":\"",
  "DEFAULT",
  "THROW",
  "TRY",
  "CATCH",
  "FINALLY",
  "NUMERIC_LITERAL",
  "STRING_LITERAL",
  "REGEXP_LITERAL",
  "NULL",
  "TRUE",
  "FALSE",
  "THIS",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "NEW",
  "INCREMENT",
  "DECREMENT",
  "DELETE",
  "VOID",
  "TYPEOF",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "SHIFT_LEFT",
  "SHIFT_RIGHT",
  "U_SHIFT_RIGHT",
  "\"<\"",
  "\">\"",
  "LESS_EQUAL",
  "GRATER_EQUAL",
  "INSTANCEOF",
  "EQUAL",
  "NOT_EQUAL",
  "EQ",
  "NOT_EQ",
  "\"&\"",
  "\"^\"",
  "\"|\"",
  "LOGICAL_AND",
  "LOGICAL_OR",
  "\"?\"",
  "MUL_LET",
  "DIV_LET",
  "MOD_LET",
  "ADD_LET",
  "SUB_LET",
  "SHIFT_LEFT_LET",
  "SHIFT_RIGHT_LET",
  "U_SHIFT_RIGHT_LET",
  "AND_LET",
  "NOT_LET",
  "OR_LET",
  "$start",
  "program",
  "source_elements",
  "function_declaration",
  "formal_parameter_list__opt",
  "function_body",
  "function_expression",
  "identifier__opt",
  "formal_parameter_list",
  "source_element",
  "statement",
  "block",
  "variable_statement",
  "empty_statement",
  "expression_statement",
  "if_statement",
  "iteration_statement",
  "continue_statement",
  "break_statement",
  "return_statement",
  "with_statement",
  "labelled_statement",
  "switch_statement",
  "throw_statement",
  "try_statement",
  "statement_list",
  "variable_declaration_list",
  "variable_declaration",
  "variable_declaration_list_no_in",
  "variable_declaration_no_in",
  "initialiser__opt",
  "initialiser_no_in__opt",
  "initialiser",
  "assignment_expression",
  "initialiser_no_in",
  "assignment_expression_no_in",
  "expression",
  "expression_no_in__opt",
  "expression__opt",
  "left_hand_side_expression",
  "case_block",
  "case_clauses__opt",
  "default_clause",
  "case_clauses",
  "case_clause",
  "statement_list__opt",
  "catch",
  "finally",
  "literal",
  "null_literal",
  "boolean_literal",
  "primary_expression",
  "array_literal",
  "object_literal",
  "elision__opt",
  "element_list",
  "elision",
  "property_name_and_value_list__opt",
  "property_name_and_value_list",
  "property_name",
  "member_expression",
  "arguments",
  "new_expression",
  "call_expression",
  "argument_list",
  "postfix_expression",
  "unary_expression",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "relational_expression_no_in",
  "equality_expression",
  "equality_expression_no_in",
  "bitwise_and_expression",
  "bitwise_and_expression_no_in",
  "bitwise_xor_expression",
  "bitwise_xor_expression_no_in",
  "bitwise_or_expression",
  "bitwise_or_expression_no_in",
  "logical_and_expression",
  "logical_and_expression_no_in",
  "logical_or_expression",
  "logical_or_expression_no_in",
  "conditional_expression",
  "conditional_expression_no_in",
  "assignment_operator",
  "expression_no_in" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
 ep"varstat "; push(:var, [:vardeclist]) 
    result
end

def _reduce_35(val, _values, result)
 ep"varstat-wo-semi "; push(:var, [:vardeclist]) 
    result
end

def _reduce_36(val, _values, result)
 ep"vardeclist-firstdecl " 
    result
end

def _reduce_37(val, _values, result)
 ep"vardeclist-appenddecl " 
    result
end

def _reduce_38(val, _values, result)
 ep "vardeclist-no-in-first " 
    result
end

def _reduce_39(val, _values, result)
 ep"vardeclist-no-in-append " 
    result
end

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class JS

#
# racc footer
#


if ARGV.size < 1 then 
  STDERR.print <<EOF
Need input file(s).
Options:
 -q : be quiet(parse only)
 -x : test by executing out-put sexp
 -a : print as array literal
EOF
  exit 1
end

fmt = "s"
exectest = false

ARGV.each do |arg|
  if arg =~ /^-/ then
    if arg == "-q" then
      fmt = nil
    elsif arg == "-x"
      exectest = true
    elsif arg == "-a"
      fmt = "a"
    end
    
  else
	lp = JS.new
    s = File.open(arg).read
    lp.parse(s,fmt,exectest)
  end
end




    



