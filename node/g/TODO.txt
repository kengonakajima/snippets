やりたいこと:

ぼくのGoogle Driveにあるファイルの一覧をnode.jsのスクリプトから取得して、
ファイル名の一覧を表示する。

Web検索して、最新の実装案をいくつか提示する:


  1. OAuth2認証（ユーザー認証）

  - メリット: ユーザーの個人的なGoogle Driveに完全アクセス
  - デメリット: 初回ブラウザ認証が必要
  - 用途: デスクトップアプリ、個人用ツール

  2. サービスアカウント認証

  - メリット: 完全自動化可能、サーバーサイドに最適
  - デメリット: 共有設定が必要
  - 用途: バックエンドサービス、定期バッチ処理

  3. Google Auth Library（ADC）

  - メリット: 環境に応じて柔軟に認証方法を切り替え
  - デメリット: 初期設定が必要
  - 用途: 開発環境と本番環境の両方で使うアプリ

  選択の指針：
  - 個人のDriveアクセス → OAuth2
  - サーバーでの自動処理 → サービスアカウント
  - 柔軟な認証が必要 → Google Auth Library


どのサンプルにおいても、クレデンシャルは dotenvを経由して .envから読み込む。
.envのサンプルを  .env.sample として保存する。



## oa.js : OAuthを用いるデモ
  1. https://console.cloud.google.com/でプロジェクトを作成
  2. Google Drive APIを有効化
  3. OAuth 2.0クライアントID（デスクトップアプリケーション）を作成
  4. 認証情報をダウンロードしてcredentials.jsonとして保存
  5. npm installで依存関係をインストール
  6. node oa.jsを実行


READMEは短い必要がある。コード自体を含めないこと。

クレデンシャルは、 .envファイルを dotenv経由で読み、 .env.sampleをつくる


OAのredirect URIについて、デスクトップアプリの場合の選択肢：

  1. urn:ietf:wg:oauth:2.0:oob （Out Of Band）
    - 認証コードが画面に表示される
    - ユーザーが手動でコードをコピー＆ペースト
    - 現在のoa.jsではこれを使用
  2. http://localhost や http://localhost:ポート番号
    - ローカルサーバーを立てて自動的にコードを受け取る
    - より自動化されているが、実装が複雑
